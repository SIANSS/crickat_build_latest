/**
 * Module dependencies.
 */
var passport = require('passport-strategy')
  , util = require('util')
  , lookup = require('./utils').lookup;


/**
 * `Strategy` constructor.
 *
 * The local authentication strategy authenticates requests based on the
 * credentials submitted through an HTML-based login form.
 *
 * Applications must supply a `verify` callback which accepts `username` and
 * `password` credentials, and then calls the `done` callback supplying a
 * `user`, which should be set to `false` if the credentials are not valid.
 * If an exception occured, `err` should be set.
 *
 * Optionally, `options` can be used to change the fields in which the
 * credentials are found.
 *
 * Options:
 *   - `usernameField`  field name where the username is found, defaults to _username_
 *   - `passwordField`  field name where the password is found, defaults to _password_
 *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)
 *
 * Examples:
 *
 *     passport.use(new LocalStrategy(
 *       function(username, password, done) {
 *         User.findOne({ username: username, password: password }, function (err, user) {
 *           done(err, user);
 *         });
 *       }
 *     ));
 *
 * @param {Object} options
 * @param {Function} verify
 * @api public
 */
function Strategy(options, verify) {
  if (typeof options == 'function') {
    verify = options;
    options = {};
  }
  if (!verify) { throw new TypeError('LocalStrategy requires a verify callback'); }

  // this._usernameField = options.usernameField || 'username';
  // this._passwordField = options.passwordField || 'password';

  this._teamnameField = options.teamnameField || 'team_name';
  this._teamlocationField = options.teamlocationField || 'team_location';
  this._teamorigindataField = options.teamorigindataField || 'team_od';
  this._teammannameField = options.teammannameField || 'team_man_name';
  this._teammannumberField = options.teammannumberField || 'team_man_num';
  this._teammanmailField = options.teammanmailField || 'team_man_mail';
  this._passwordField = options.passwordField || 'team_code';
  this._teamcapnameField = options.teamcapnameField || 'team_cap_name';
  this._teamcapnumField = options.teamcapnumField || 'team_cap_num';
  this._teamcapmailFIeld = options.teamcapmailFIeld || 'team_cap_mail';


  passport.Strategy.call(this);
  this.name = 'manager';
  this._verify = verify;
  this._passReqToCallback = options.passReqToCallback;
}

/**
 * Inherit from `passport.Strategy`.
 */
util.inherits(Strategy, passport.Strategy);

/**
 * Authenticate request based on the contents of a form submission.
 *
 * @param {Object} req
 * @api protected
 */
Strategy.prototype.authenticate = function(req, options) {
  options = options || {};

  var team_name = lookup(req.body, this._teamnameField) || lookup(req.query, this._teamnameField);
  var team_location = lookup(req.body, this._teamlocationField) || lookup(req.query, this._teamlocationField);
  var team_od = lookup(req.body, this._teamorigindataField) || lookup(req.query, this._teamorigindataField);
  var team_man_name = lookup(req.body, this._teammannameField) || lookup(req.query, this._teammannameField);
  var team_man_num = lookup(req.body, this._teammannumberField) || lookup(req.query, this._teammannumberField);
  var team_man_mail = lookup(req.body, this._teammanmailField) || lookup(req.query, this._teammanmailField);
  var team_code = lookup(req.body, this._passwordField) || lookup(req.query, this._passwordField);
  var team_cap_name = lookup(req.body, this._teamcapnameField) || lookup(req.query, this._teamcapnameField);
  var team_cap_num = lookup(req.body, this._teamcapnumField) || lookup(req.query, this._teamcapnumField);
  var team_cap_mail = lookup(req.body, this._teamcapmailFIeld) || lookup(req.query, this._teamcapmailFIeld);


  if (!team_name || !team_location || !team_od || !team_man_name || !team_man_num || !team_man_mail || !team_code || !team_cap_name || !team_cap_num || !team_cap_mail) {
    return this.fail({ message: options.badRequestMessage || 'Missing credentials' }, 400);
  }

  var self = this;

  function verified(err, team, info) {
    if (err) { return self.error(err); }
    if (!team) { return self.fail(info); }
    self.success(team, info);
  }

  try {
    if (self._passReqToCallback) {
      this._verify(req, team_name, team_location, team_od, team_man_name, team_man_num, team_man_mail, team_code, team_cap_name, team_cap_num, team_cap_mail, verified);
    } else {
      this._verify(team_name, team_location, team_od, team_man_name, team_man_num, team_man_mail, team_code, team_cap_name, team_cap_num, team_cap_mail, verified);
    }
  } catch (ex) {
    return self.error(ex);
  }
};


/**
 * Expose `Strategy`.
 */
module.exports = Strategy;
